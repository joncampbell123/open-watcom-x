/***************************************************************************
 * FILE: stdbool.h/cstdbool (Macros to simulate the 'bool' type in C)
 *
:include crwat.sp
 *
 * Description: This header is part of the C99/C++ standard library. It
 *              provides a way for the programmer, at his/her option
 *              to introduce the type 'bool' into a C program.
 ***************************************************************************/
:segment CNAME
#ifndef _CSTDBOOL_INCLUDED
#define _CSTDBOOL_INCLUDED

:include readonly.sp

:include cpponly.sp
:elsesegment
#ifndef _STDBOOL_H_INCLUDED
#define _STDBOOL_H_INCLUDED

:include readonly.sp
:endsegment

::
:: To prevent compatibility problems for C++ programs that call C
:: functions using the 'bool' defined here, the sizeof(C++'s bool)
:: should be equal to the sizeof(C's bool defined here). Currently
:: for C++, sizeof(bool) == 1.
::
:: Similarly the values for 'true' and 'false' defined here should
:: be compatible with the values of true and false built into the
:: C++ compiler. That appears to be the case with 1 and 0 (is that
:: a consequence of the C++ standard?)
::
:segment CNAME
:: C++ programs should use the built in bool type.
#define __bool_true_false_are_defined 1
:elsesegment
#ifdef __cplusplus

#include <cstdbool>

#else /* __cplusplus not defined */

::
:: _Bool type was introduced by C99 standard
:: in compiler C89 mode _Bool type is defined if extension is enabled
:: in compiler C89 pure mode (without extension) _Bool type doesn't exist
:: I am not sure if define _Bool type in this case is correct
:: but it is symbol from compiler reserved namespace that user should not use it
::
 #if defined( _NO_EXT_KEYS ) && __STDC_VERSION__ < 199901L /* C89 and extensions disabled */
  typedef unsigned char _Bool;
 #endif

 #define bool _Bool
 #define true  1
 #define false 0
 #define __bool_true_false_are_defined 1

#endif /* __cplusplus not defined */
:endsegment

#endif
