/* UTF-8 encoding, Â¥ */

#if defined( RESX_ENG )
#elif defined( RESX_GUI )
  #if defined( __OS2__ )
    #define RC_ITEM(a,b,c)  a b c
    #include <os2.h>
  #else
    #define RC_ITEM(a,b,c)  b a c
    #include <windows.h>
  #endif
#else
    #include "wresdefn.h"
#endif
#include "wv.rh"
#include "banner.h"
#include "liteng.gh"
#if !defined( RESX_ENG )
    #include "litdui.gh"
    #include "litmenu.gh"
#endif

#if !defined( RESX_ENG )
    #include "aui.rc"
    #include "dialogs.rc"
 #if defined( RESX_GUI )
  #if defined( __OS2__ )
    RC_ITEM( ICON, 1,         "zapant.ico" )
  #else
    RC_ITEM( ICON, ApplIcon,  "zapant.ico" )
  #endif
    RC_ITEM( ICON, ICON_MAIN, "zapant.ico" )
    RC_ITEM( ICON, ICON_FPU,  "8087.ico" )
    RC_ITEM( ICON, ICON_ASM,  "asm.ico" )
    RC_ITEM( ICON, ICON_BRK,  "brk.ico" )
    RC_ITEM( ICON, ICON_CALL, "call.ico" )
    RC_ITEM( ICON, ICON_EXE,  "exe.ico" )
    RC_ITEM( ICON, ICON_FUNC, "func.ico" )
    RC_ITEM( ICON, ICON_GLOB, "glob.ico" )
    RC_ITEM( ICON, ICON_ACL,  "hot.ico" )
    RC_ITEM( ICON, ICON_IO,   "io.ico" )
    RC_ITEM( ICON, ICON_LOG,  "log.ico" )
    RC_ITEM( ICON, ICON_MEM,  "mem.ico" )
    RC_ITEM( ICON, ICON_MOD,  "mod.ico" )
    RC_ITEM( ICON, ICON_REG,  "reg.ico" )
    RC_ITEM( ICON, ICON_REPL, "repl.ico" )
    RC_ITEM( ICON, ICON_SRC,  "src.ico" )
    RC_ITEM( ICON, ICON_SRCH, "srch.ico" )
    RC_ITEM( ICON, ICON_THRD, "thrd.ico" )
    RC_ITEM( ICON, ICON_VAR,  "var.ico" )
    RC_ITEM( ICON, ICON_LOC,  "loc.ico" )
    RC_ITEM( ICON, ICON_WAT,  "wat.ico" )

    RC_ITEM( BITMAP, BITMAP_SPLASH,   "splash.bmp" )
    RC_ITEM( BITMAP, BITMAP_READ1,    "read1.bmp" )
    RC_ITEM( BITMAP, BITMAP_READ2,    "read2.bmp" )
    RC_ITEM( BITMAP, BITMAP_WRITE1,   "write1.bmp" )
    RC_ITEM( BITMAP, BITMAP_WRITE2,   "write2.bmp" )
    RC_ITEM( BITMAP, BITMAP_OPEN1,    "open1.bmp" )
    RC_ITEM( BITMAP, BITMAP_OPEN2,    "open2.bmp" )
    RC_ITEM( BITMAP, BITMAP_CLOSE1,   "close1.bmp" )
    RC_ITEM( BITMAP, BITMAP_CLOSE2,   "close2.bmp" )
    RC_ITEM( BITMAP, BITMAP_POINTS1,  "points1.bmp" )
    RC_ITEM( BITMAP, BITMAP_POINTS2,  "points2.bmp" )
    RC_ITEM( BITMAP, BITMAP_IOPEN1,   "iopen1.bmp" )
    RC_ITEM( BITMAP, BITMAP_IOPEN2,   "iopen2.bmp" )
    RC_ITEM( BITMAP, BITMAP_ICLOSE1,  "iclose1.bmp" )
    RC_ITEM( BITMAP, BITMAP_ICLOSE2,  "iclose2.bmp" )
    RC_ITEM( BITMAP, BITMAP_BPOINTS1, "bpoints1.bmp" )
    RC_ITEM( BITMAP, BITMAP_BPOINTS2, "bpoints2.bmp" )
    RC_ITEM( BITMAP, BITMAP_CODEHER1, "codeher1.bmp" )
    RC_ITEM( BITMAP, BITMAP_CODEHER2, "codeher2.bmp" )
    RC_ITEM( BITMAP, BITMAP_BRKHERE1, "brkhere1.bmp" )
    RC_ITEM( BITMAP, BITMAP_BRKHERE2, "brkhere2.bmp" )
    RC_ITEM( BITMAP, BITMAP_DIMBRK1,  "dimbrk1.bmp" )
    RC_ITEM( BITMAP, BITMAP_DIMBRK2,  "dimbrk2.bmp" )
    RC_ITEM( BITMAP, BITMAP_OPENSRC1, "source1.bmp" )
    RC_ITEM( BITMAP, BITMAP_OPENSRC2, "source2.bmp" )
    RC_ITEM( BITMAP, BITMAP_CLSSRC1,  "source2.bmp" )
    RC_ITEM( BITMAP, BITMAP_CLSSRC2,  "source1.bmp" )
    RC_ITEM( BITMAP, BITMAP_OPENASM1, "assembl1.bmp" )
    RC_ITEM( BITMAP, BITMAP_OPENASM2, "assembl2.bmp" )
    RC_ITEM( BITMAP, BITMAP_CLSASM1,  "assembl2.bmp" )
    RC_ITEM( BITMAP, BITMAP_CLSASM2,  "assembl1.bmp" )
    RC_ITEM( BITMAP, BITMAP_CURRLIN1, "currlin1.bmp" )
    RC_ITEM( BITMAP, BITMAP_CURRLIN2, "currlin2.bmp" )
    RC_ITEM( BITMAP, BITMAP_UNPOINT1, "unpoint1.bmp" )
    RC_ITEM( BITMAP, BITMAP_UNPOINT2, "unpoint2.bmp" )
    RC_ITEM( BITMAP, BITMAP_CURRBRK1, "currbrk1.bmp" )
    RC_ITEM( BITMAP, BITMAP_CURRBRK2, "currbrk2.bmp" )
    RC_ITEM( BITMAP, BITMAP_CURRDIM1, "currdim1.bmp" )
    RC_ITEM( BITMAP, BITMAP_CURRDIM2, "currdim2.bmp" )
    RC_ITEM( BITMAP, BITMAP_GO,       "go.bmp" )
    RC_ITEM( BITMAP, BITMAP_OVER,     "over.bmp" )
    RC_ITEM( BITMAP, BITMAP_INTO,     "into.bmp" )
    RC_ITEM( BITMAP, BITMAP_RETURN,   "return.bmp" )
    RC_ITEM( BITMAP, BITMAP_BACK,     "back.bmp" )
    RC_ITEM( BITMAP, BITMAP_FOR,      "for.bmp" )
    RC_ITEM( BITMAP, BITMAP_UP,       "up.bmp" )
    RC_ITEM( BITMAP, BITMAP_DOWN,     "down.bmp" )
    RC_ITEM( BITMAP, BITMAP_HOME,     "home.bmp" )
 #endif
#endif

STRINGTABLE
BEGIN
    /*
     * English strings
     */
    #define pick(c,e,j) (DBG_ENG_LITERAL_##c + RLE_ENGLISH * MSG_LANG_SPACING), [ e ]
    #include "wdeng.gh"
    #undef pick
#if !defined( RESX_ENG )
    #define pick(c,e,j) (DBG_DUI_LITERAL_##c + RLE_ENGLISH * MSG_LANG_SPACING), [ e ]
    #include "wddui.gh"
    #undef pick
    #define pick(c,e,j) (DBG_DUI_MENU_##c + RLE_ENGLISH * MSG_LANG_SPACING), [ e ]
    #include "wdmenu.gh"
    #undef pick
  #if !defined( RESX_GUI )
    #define pick(c,e,j) (c + RLE_ENGLISH * MSG_LANG_SPACING), [ e ]
    #include "usage.gh"
    #undef pick
  #endif
#endif
    /*
     * Japanese strings
     */
    #define pick(c,e,j) (DBG_ENG_LITERAL_##c + RLE_JAPANESE * MSG_LANG_SPACING), [ j ]
    #include "wdeng.gh"
    #undef pick
#if !defined( RESX_ENG )
    #define pick(c,e,j) (DBG_DUI_LITERAL_##c + RLE_JAPANESE * MSG_LANG_SPACING), [ j ]
    #include "wddui.gh"
    #undef pick
    #define pick(c,e,j) (DBG_DUI_MENU_##c + RLE_JAPANESE * MSG_LANG_SPACING), [ j ]
    #include "wdmenu.gh"
    #undef pick
  #if !defined( RESX_GUI )
    #define pick(c,e,j) (c + RLE_JAPANESE * MSG_LANG_SPACING), [ j ]
    #include "usagej.gh"
    #undef pick
  #endif
#endif
END

#if defined( __NT__ ) && defined( RESX_NTVER )
    #include "exever.grc"
#endif
